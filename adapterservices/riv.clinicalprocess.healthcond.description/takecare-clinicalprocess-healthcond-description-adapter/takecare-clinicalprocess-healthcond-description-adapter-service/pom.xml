<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- DON'T CHANGE THE CONTENT OF THIS COMMENT UNLESS YOU REALLY KNOW WHAT 
	YOU ARE DOING! [soi-toolkit.gen.version=0.6.0] [soi-toolkit.gen.type=services] 
	[soi-toolkit.gen.createDate=2013-07-24T11:05:18.381+02:00] [soi-toolkit.gen.artifactId=takecare-clinicalprocess-healthcond-description-adapter] -->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>se.skltp.adapterservices.clinicalprocess.healthcond.description</groupId>
		<artifactId>takecare-clinicalprocess-healthcond-description-adapter</artifactId>
		<version>1.0.0-SNAPSHOT</version>
	</parent>

	<groupId>se.skltp.adapterservices.clinicalprocess.healthcond.description</groupId>
	<artifactId>${parent.artifactId}-service</artifactId>
	<packaging>mule</packaging>
	<name>${project.artifactId}</name>

	<dependencies>
		<dependency>
			<groupId>se.rivta.tools</groupId>
			<artifactId>clinicalprocess-healthcond-description-schemas</artifactId>
			<version>1.0-SNAPSHOT</version>
		</dependency>
		<dependency>
			<groupId>org.soitoolkit.commons.components</groupId>
			<artifactId>soitoolkit-commons-mule</artifactId>
			<version>${soitoolkit.version}</version>
		</dependency>

		<dependency>
			<groupId>org.soitoolkit.commons.poms</groupId>
			<artifactId>soitoolkit-test-dependencies</artifactId>
			<version>${soitoolkit.version}</version>
			<type>pom</type>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.soitoolkit.commons.poms.mule-dependencies</groupId>
			<artifactId>soitoolkit-mule-3.3.0-dependencies</artifactId>
			<version>${soitoolkit.version}</version>
			<type>pom</type>
		</dependency>
		<dependency>
			<groupId>xmlunit</groupId>
			<artifactId>xmlunit</artifactId>
			<version>1.4</version>
			<scope>test</scope>
		</dependency>
		<dependency>
		  <groupId>org.apache.httpcomponents</groupId>
		  <artifactId>httpclient</artifactId>
		  <version>4.2.5</version>
		</dependency>
	</dependencies>

	<build>
		<resources>
			<resource>
				<directory>${basedir}/src/main/resources</directory>
			</resource>
			<resource>
				<!-- To get mule-config files from the Mule Studio defined resource-folder 
					in the classpath... -->
				<directory>${basedir}/src/main/app</directory>
			</resource>
		</resources>

		<plugins>
			<plugin>
				<!-- Add mule-nature to the eclipse-.project-file -->
				<artifactId>maven-eclipse-plugin</artifactId>
				<configuration>
					<additionalBuildcommands>
						<buildcommand>org.mule.tooling.core.muleBuilder</buildcommand>
					</additionalBuildcommands>
					<additionalProjectnatures>
						<projectnature>org.mule.tooling.core.muleNature</projectnature>
					</additionalProjectnatures>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.mule.tools</groupId>
				<artifactId>maven-mule-plugin</artifactId>
				<extensions>true</extensions>
				<!-- Include mule-dependencies that doesn't come with Mule 3.x otherwise 
					we can't install to a vanilla Mule 3.x installation -->
				<configuration>
					<inclusions>
						<inclusion>
							<groupId>org.mule.modules</groupId>
							<artifactId>mule-module-rest</artifactId>
						</inclusion>
						<inclusion>
							<groupId>org.mule.modules</groupId>
							<artifactId>devkit</artifactId>
						</inclusion>
					</inclusions>
					<exclusions>

						<!-- xercesImpl is endorsed in MULE_HOME/lib/endorsed, see issue 274 -->
						<exclusion>
							<groupId>xerces</groupId>
							<artifactId>xercesImpl</artifactId>
						</exclusion>

						<!-- log4j is already included in MULE_HOME/lib/boot, see issue 283 -->
						<exclusion>
							<groupId>log4j</groupId>
							<artifactId>log4j</artifactId>
						</exclusion>

						<!-- junit is already included in MULE_HOME/lib/opt, see issue 283 -->
						<exclusion>
							<groupId>junit</groupId>
							<artifactId>junit</artifactId>
						</exclusion>

						<!-- servlet-api-2.5 is already included in MULE_HOME/lib/opt, see 
							issue 283 -->
						<exclusion>
							<groupId>org.mortbay.jetty</groupId>
							<artifactId>servlet-api-2.5</artifactId>
						</exclusion>

						<!-- jug is already included in MULE_HOME/lib/opt, see issue 283 -->
						<exclusion>
							<groupId>org.safehaus.jug</groupId>
							<artifactId>jug.osgi</artifactId>
						</exclusion>
						<!-- activemq needs to be added manually to MULE_HOME/lib/user if required, 
							see issue 283 -->
						<exclusion>
							<groupId>org.apache.activemq</groupId>
							<artifactId>activemq-core</artifactId>
						</exclusion>
						<exclusion>
							<groupId>org.apache.xbean</groupId>
							<artifactId>xbean-spring</artifactId>
						</exclusion>

						<!-- hornetq needs to be added manually to MULE_HOME/lib/user if required, 
							see issue 283 -->
						<exclusion>
							<groupId>org.hornetq</groupId>
							<artifactId>hornetq-core-client</artifactId>
						</exclusion>
						<exclusion>
							<groupId>org.hornetq</groupId>
							<artifactId>hornetq-jms</artifactId>
						</exclusion>
						<exclusion>
							<groupId>org.jboss.netty</groupId>
							<artifactId>netty</artifactId>
						</exclusion>

						<!-- jtds (JDBC driver fpr Microsoft SQL Server) needs to be added 
							manually to MULE_HOME/lib/user if required, see issue 283 -->
						<exclusion>
							<groupId>net.sourceforge.jtds</groupId>
							<artifactId>jtds</artifactId>
						</exclusion>

					</exclusions>
				</configuration>
			</plugin>

			<plugin>
				<artifactId>maven-jar-plugin</artifactId>
				<configuration>
					<!-- if no classifier is declared, then a mvn install results in a file 
						in the local repo: ic2-1.0.0-SNAPSHOT.mule which is a jar-file - only strangely 
						named and with a bad extension -->
					<classifier>core</classifier>
					<excludes>
						<exclude>log4j.xml</exclude>
					</excludes>
				</configuration>
				<executions>
					<execution>
						<goals>
							<goal>jar</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>build-helper-maven-plugin</artifactId>
				<version>1.7</version>
				<executions>
					<execution>
						<id>add-source</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>add-source</goal>
						</goals>
						<configuration>
							<sources>
								<source>src/main/groovy</source>
							</sources>
						</configuration>
					</execution>
					<execution>
						<id>add-test-source</id>
						<phase>generate-sources</phase>
						<!-- Below phase doesn't work with mvn eclipse:clean eclipse:eclipse -->
						<!-- <phase>generate-test-sources</phase> -->
						<goals>
							<goal>add-test-source</goal>
						</goals>
						<configuration>
							<sources>
								<source>src/test/groovy</source>
							</sources>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<compilerId>groovy-eclipse-compiler</compilerId>
					<version>2.3.2</version>
					<!-- set verbose to be true if you want lots of uninteresting messages -->
					<verbose>true</verbose>
				</configuration>
				<dependencies>
					<!-- Define which Groovy version will be used for build (default is 
						2.0) -->
					<dependency>
						<groupId>org.codehaus.groovy</groupId>
						<artifactId>groovy-eclipse-batch</artifactId>
						<version>1.8.6-01</version>
					</dependency>
					<!-- Define dependency to Groovy Eclipse Compiler (as it's referred 
						in compilerId) -->
					<dependency>
						<groupId>org.codehaus.groovy</groupId>
						<artifactId>groovy-eclipse-compiler</artifactId>
						<version>2.6.0-01</version>
						<exclusions>
							<exclusion>
								<groupId>org.codehaus.groovy</groupId>
								<artifactId>groovy-eclipse-batch</artifactId>
							</exclusion>
						</exclusions>
					</dependency>
				</dependencies>
			</plugin>
			<plugin>
				<!-- Add groovy and mule-nature to the eclipse-.project-file -->
				<artifactId>maven-eclipse-plugin</artifactId>
				<configuration>
					<additionalBuildcommands>
						<buildcommand>org.mule.tooling.core.groovyBuilder</buildcommand>
						<buildcommand>org.mule.tooling.core.muleBuilder</buildcommand>
					</additionalBuildcommands>
					<additionalProjectnatures>
						<projectnature>org.eclipse.jdt.groovy.core.groovyNature</projectnature>
						<projectnature>org.mule.tooling.core.muleNature</projectnature>
					</additionalProjectnatures>
					<sourceIncludes>
						<sourceIncludes>**/*.groovy</sourceIncludes>
					</sourceIncludes>
				</configuration>
			</plugin>

		</plugins>
		<!-- To define the plugin version in your parent POM -->
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>build-helper-maven-plugin</artifactId>
					<version>1.7</version>
				</plugin>

				<!-- Define Groovy Eclipse Compiler and set extensions=true. Thanks to 
					this, plugin will -->
				<!-- enhance default build life cycle with an extra phase which adds 
					additional Groovy source folders -->
				<!-- It works fine under Maven 3.x, but we've encountered problems with 
					Maven 2.x -->
				<plugin>
					<groupId>org.codehaus.groovy</groupId>
					<artifactId>groovy-eclipse-compiler</artifactId>
					<version>2.6.0-01</version>
					<extensions>true</extensions>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>

	<profiles>
		<profile>
			<id>muleServer</id>
			<!-- Start mule server with the command "mvn -PmuleServer" or "mvn -PmuleServer 
				-Dexec.args="${artifaceId}-config.xml"" if you want to override the default 
				config-file -->
			<build>
				<defaultGoal>test</defaultGoal>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>exec-maven-plugin</artifactId>
						<executions>
							<execution>
								<phase>test</phase>
								<goals>
									<goal>java</goal>
								</goals>
								<configuration>
									<mainClass>se.skltp.adapterservices.clinicalprocess.healthcond.description.takecareclinicalprocesshealthconddescriptionadapter.TakecareClinicalprocessHealthcondDescriptionAdapterMuleServer</mainClass>
									<classpathScope>test</classpathScope>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<artifactId>maven-surefire-plugin</artifactId>
						<configuration>
							<skip>true</skip>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
</project>
